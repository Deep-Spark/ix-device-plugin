// WARNING: This file has automatically been generated on Tue, 23 Jul 2024 17:29:31 CST.
// Code generated by https://git.io/c-for-go. DO NOT EDIT.

package ixml

/*
#cgo LDFLAGS: -Wl,--export-dynamic -Wl,--unresolved-symbols=ignore-in-object-files
#cgo CFLAGS: -DNVML_NO_UNVERSIONED_FUNC_DEFS=1
#include "api.h"
#include <stdlib.h>
#include "cgo_helpers.h"
*/
import "C"
import (
	"fmt"
	"runtime"
	"sync"
	"unsafe"
)

// Ref returns a reference to C object as it is.
func (x *Device) Ref() *C.nvmlDevice_t {
	if x == nil {
		return nil
	}
	return (*C.nvmlDevice_t)(unsafe.Pointer(x))
}

// Free cleanups the referenced memory using C free.
func (x *Device) Free() {
	if x != nil {
		C.free(unsafe.Pointer(x))
	}
}

// NewDeviceRef converts the C object reference into a raw struct reference without wrapping.
func NewDeviceRef(ref unsafe.Pointer) *Device {
	return (*Device)(ref)
}

// NewDevice allocates a new C object of this type and converts the reference into
// a raw struct reference without wrapping.
func NewDevice() *Device {
	return (*Device)(allocDeviceMemory(1))
}

// allocDeviceMemory allocates memory for type C.nvmlDevice_t in C.
// The caller is responsible for freeing the this memory via C.free.
func allocDeviceMemory(n int) unsafe.Pointer {
	mem, err := C.calloc(C.size_t(n), (C.size_t)(sizeOfDeviceValue))
	if mem == nil {
		panic(fmt.Sprintln("memory alloc error: ", err))
	}
	return mem
}

const sizeOfDeviceValue = unsafe.Sizeof([1]C.nvmlDevice_t{})

// cgoAllocMap stores pointers to C allocated memory for future reference.
type cgoAllocMap struct {
	mux sync.RWMutex
	m   map[unsafe.Pointer]struct{}
}

var cgoAllocsUnknown = new(cgoAllocMap)

func (a *cgoAllocMap) Add(ptr unsafe.Pointer) {
	a.mux.Lock()
	if a.m == nil {
		a.m = make(map[unsafe.Pointer]struct{})
	}
	a.m[ptr] = struct{}{}
	a.mux.Unlock()
}

func (a *cgoAllocMap) IsEmpty() bool {
	a.mux.RLock()
	isEmpty := len(a.m) == 0
	a.mux.RUnlock()
	return isEmpty
}

func (a *cgoAllocMap) Borrow(b *cgoAllocMap) {
	if b == nil || b.IsEmpty() {
		return
	}
	b.mux.Lock()
	a.mux.Lock()
	for ptr := range b.m {
		if a.m == nil {
			a.m = make(map[unsafe.Pointer]struct{})
		}
		a.m[ptr] = struct{}{}
		delete(b.m, ptr)
	}
	a.mux.Unlock()
	b.mux.Unlock()
}

func (a *cgoAllocMap) Free() {
	a.mux.Lock()
	for ptr := range a.m {
		C.free(ptr)
		delete(a.m, ptr)
	}
	a.mux.Unlock()
}

// PassRef returns a reference to C object as it is or allocates a new C object of this type.
func (x *Device) PassRef() *C.nvmlDevice_t {
	if x == nil {
		x = (*Device)(allocDeviceMemory(1))
	}
	return (*C.nvmlDevice_t)(unsafe.Pointer(x))
}

// Ref returns a reference to C object as it is.
func (x *EventSet) Ref() *C.nvmlEventSet_t {
	if x == nil {
		return nil
	}
	return (*C.nvmlEventSet_t)(unsafe.Pointer(x))
}

// Free cleanups the referenced memory using C free.
func (x *EventSet) Free() {
	if x != nil {
		C.free(unsafe.Pointer(x))
	}
}

// NewEventSetRef converts the C object reference into a raw struct reference without wrapping.
func NewEventSetRef(ref unsafe.Pointer) *EventSet {
	return (*EventSet)(ref)
}

// NewEventSet allocates a new C object of this type and converts the reference into
// a raw struct reference without wrapping.
func NewEventSet() *EventSet {
	return (*EventSet)(allocEventSetMemory(1))
}

// allocEventSetMemory allocates memory for type C.nvmlEventSet_t in C.
// The caller is responsible for freeing the this memory via C.free.
func allocEventSetMemory(n int) unsafe.Pointer {
	mem, err := C.calloc(C.size_t(n), (C.size_t)(sizeOfEventSetValue))
	if mem == nil {
		panic(fmt.Sprintln("memory alloc error: ", err))
	}
	return mem
}

const sizeOfEventSetValue = unsafe.Sizeof([1]C.nvmlEventSet_t{})

// PassRef returns a reference to C object as it is or allocates a new C object of this type.
func (x *EventSet) PassRef() *C.nvmlEventSet_t {
	if x == nil {
		x = (*EventSet)(allocEventSetMemory(1))
	}
	return (*C.nvmlEventSet_t)(unsafe.Pointer(x))
}

// Ref returns a reference to C object as it is.
func (x *Memory) Ref() *C.nvmlMemory_t {
	if x == nil {
		return nil
	}
	return (*C.nvmlMemory_t)(unsafe.Pointer(x))
}


// NewMemoryRef converts the C object reference into a raw struct reference without wrapping.
func NewMemoryRef(ref unsafe.Pointer) *Memory {
	return (*Memory)(ref)
}

// NewMemory allocates a new C object of this type and converts the reference into
// a raw struct reference without wrapping.
func NewMemory() *Memory {
	return (*Memory)(allocMemoryMemory(1))
}

// allocMemoryMemory allocates memory for type C.nvmlMemory_t in C.
// The caller is responsible for freeing the this memory via C.free.
func allocMemoryMemory(n int) unsafe.Pointer {
	mem, err := C.calloc(C.size_t(n), (C.size_t)(sizeOfMemoryValue))
	if mem == nil {
		panic(fmt.Sprintln("memory alloc error: ", err))
	}
	return mem
}

const sizeOfMemoryValue = unsafe.Sizeof([1]C.nvmlMemory_t{})

// PassRef returns a reference to C object as it is or allocates a new C object of this type.
func (x *Memory) PassRef() *C.nvmlMemory_t {
	if x == nil {
		x = (*Memory)(allocMemoryMemory(1))
	}
	return (*C.nvmlMemory_t)(unsafe.Pointer(x))
}

// Ref returns a reference to C object as it is.
func (x *Memory_v2) Ref() *C.nvmlMemory_v2_t {
	if x == nil {
		return nil
	}
	return (*C.nvmlMemory_v2_t)(unsafe.Pointer(x))
}

// NewMemory_v2Ref converts the C object reference into a raw struct reference without wrapping.
func NewMemory_v2Ref(ref unsafe.Pointer) *Memory_v2 {
	return (*Memory_v2)(ref)
}

// NewMemory_v2 allocates a new C object of this type and converts the reference into
// a raw struct reference without wrapping.
func NewMemory_v2() *Memory_v2 {
	return (*Memory_v2)(allocMemory_v2Memory(1))
}

// allocMemory_v2Memory allocates memory for type C.nvmlMemory_v2_t in C.
// The caller is responsible for freeing the this memory via C.free.
func allocMemory_v2Memory(n int) unsafe.Pointer {
	mem, err := C.calloc(C.size_t(n), (C.size_t)(sizeOfMemory_v2Value))
	if mem == nil {
		panic(fmt.Sprintln("memory alloc error: ", err))
	}
	return mem
}

const sizeOfMemory_v2Value = unsafe.Sizeof([1]C.nvmlMemory_v2_t{})

// PassRef returns a reference to C object as it is or allocates a new C object of this type.
func (x *Memory_v2) PassRef() *C.nvmlMemory_v2_t {
	if x == nil {
		x = (*Memory_v2)(allocMemory_v2Memory(1))
	}
	return (*C.nvmlMemory_v2_t)(unsafe.Pointer(x))
}

// Ref returns a reference to C object as it is.
func (x *Utilization) Ref() *C.nvmlUtilization_t {
	if x == nil {
		return nil
	}
	return (*C.nvmlUtilization_t)(unsafe.Pointer(x))
}

// Free cleanups the referenced memory using C free.
func (x *Utilization) Free() {
	if x != nil {
		C.free(unsafe.Pointer(x))
	}
}

// NewUtilizationRef converts the C object reference into a raw struct reference without wrapping.
func NewUtilizationRef(ref unsafe.Pointer) *Utilization {
	return (*Utilization)(ref)
}

// NewUtilization allocates a new C object of this type and converts the reference into
// a raw struct reference without wrapping.
func NewUtilization() *Utilization {
	return (*Utilization)(allocUtilizationMemory(1))
}

// allocUtilizationMemory allocates memory for type C.nvmlUtilization_t in C.
// The caller is responsible for freeing the this memory via C.free.
func allocUtilizationMemory(n int) unsafe.Pointer {
	mem, err := C.calloc(C.size_t(n), (C.size_t)(sizeOfUtilizationValue))
	if mem == nil {
		panic(fmt.Sprintln("memory alloc error: ", err))
	}
	return mem
}

const sizeOfUtilizationValue = unsafe.Sizeof([1]C.nvmlUtilization_t{})

// PassRef returns a reference to C object as it is or allocates a new C object of this type.
func (x *Utilization) PassRef() *C.nvmlUtilization_t {
	if x == nil {
		x = (*Utilization)(allocUtilizationMemory(1))
	}
	return (*C.nvmlUtilization_t)(unsafe.Pointer(x))
}

// Ref returns a reference to C object as it is.
func (x *PciInfo) Ref() *C.nvmlPciInfo_t {
	if x == nil {
		return nil
	}
	return (*C.nvmlPciInfo_t)(unsafe.Pointer(x))
}

// Free cleanups the referenced memory using C free.
func (x *PciInfo) Free() {
	if x != nil {
		C.free(unsafe.Pointer(x))
	}
}

// NewPciInfoRef converts the C object reference into a raw struct reference without wrapping.
func NewPciInfoRef(ref unsafe.Pointer) *PciInfo {
	return (*PciInfo)(ref)
}

// NewPciInfo allocates a new C object of this type and converts the reference into
// a raw struct reference without wrapping.
func NewPciInfo() *PciInfo {
	return (*PciInfo)(allocPciInfoMemory(1))
}

// allocPciInfoMemory allocates memory for type C.nvmlPciInfo_t in C.
// The caller is responsible for freeing the this memory via C.free.
func allocPciInfoMemory(n int) unsafe.Pointer {
	mem, err := C.calloc(C.size_t(n), (C.size_t)(sizeOfPciInfoValue))
	if mem == nil {
		panic(fmt.Sprintln("memory alloc error: ", err))
	}
	return mem
}

const sizeOfPciInfoValue = unsafe.Sizeof([1]C.nvmlPciInfo_t{})

// PassRef returns a reference to C object as it is or allocates a new C object of this type.
func (x *PciInfo) PassRef() *C.nvmlPciInfo_t {
	if x == nil {
		x = (*PciInfo)(allocPciInfoMemory(1))
	}
	return (*C.nvmlPciInfo_t)(unsafe.Pointer(x))
}

// unpackPCharString copies the data from Go string as *C.char.
func unpackPCharString(str string) (*C.char, *cgoAllocMap) {
	allocs := new(cgoAllocMap)
	defer runtime.SetFinalizer(allocs, func(a *cgoAllocMap) {
		go a.Free()
	})

	mem0 := unsafe.Pointer(C.CString(str))
	allocs.Add(mem0)
	return (*C.char)(mem0), allocs
}

type stringHeader struct {
	Data unsafe.Pointer
	Len  int
}
